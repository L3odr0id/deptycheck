1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen a)} -> Gen (X a)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ImplicitArg a : IType)
    => (MW AutoImplicit external^<^poly^.a>[] : IPi.  (MW ExplicitArg {arg:850} : IVar Data.Fuel.Fuel)
                                                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                           $ IVar a))
    => ILocal (IAutoApp. (IApp. IVar <DerivedGen.X>[0]
                              $ IVar ^outmost-fuel^
                              $ IVar a)
                       $ ISearch 50)
         IClaim MW
                Export
                []
                (MkTy <Prelude.Types.Maybe>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg ty : IType)
                          -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                           $ IVar ty))
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Prelude.Types.Maybe
                                         $ IVar ty))))
         IClaim MW
                Export
                []
                (MkTy <Builtin.Pair>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:22} : IType)
                          -> (MW ExplicitArg {arg:26} : IType)
                          -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                           $ IVar {arg:22}))
                          -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                           $ IVar {arg:26}))
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.Pair
                                         $ IVar {arg:22}
                                         $ IVar {arg:26}))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:830} : IType)
                          -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                           $ IVar z))
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:830}))))
         IDef <Prelude.Types.Maybe>[0]
              [ PatClause (IAutoApp. (IApp. IVar <Prelude.Types.Maybe>[0]
                                          $ IBindVar ^fuel_arg^
                                          $ IBindVar ty)
                                   $ IBindVar <^poly^.ty>[])
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Prelude.Types.Nothing>>
                                                                        $ IVar Data.Fuel.Dry
                                                                        $ IVar ty)
                                                                 $ (IApp. IVar ::
                                                                        $ (IAutoApp. (IApp. IVar <<Prelude.Types.Just>>
                                                                                          $ IVar Data.Fuel.Dry
                                                                                          $ IVar ty)
                                                                                   $ IVar <^poly^.ty>[])
                                                                        $ IVar Nil)))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Prelude.Types.Nothing>>
                                                                        $ IVar ^sub^fuel_arg^
                                                                        $ IVar ty)
                                                                 $ (IApp. IVar ::
                                                                        $ (IAutoApp. (IApp. IVar <<Prelude.Types.Just>>
                                                                                          $ IVar ^sub^fuel_arg^
                                                                                          $ IVar ty)
                                                                                   $ IVar <^poly^.ty>[])
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.Nothing>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg ty : IType)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Prelude.Types.Maybe
                                                            $ IVar ty))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.Just>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg ty : IType)
                                             -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                                      -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                              $ IVar ty))
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Prelude.Types.Maybe
                                                            $ IVar ty))))
                            IDef <<Prelude.Types.Nothing>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.Nothing>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar ty)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                  $ (IApp. IVar ::
                                                         $ (IApp. (INamedApp. IVar Prelude.pure
                                                                            $ IVar Test.DepTyCheck.Gen.Gen)
                                                                $ (INamedApp. IVar Prelude.Types.Nothing
                                                                            $ IVar ty))
                                                         $ IVar Nil)) ]
                            IDef <<Prelude.Types.Just>>
                                 [ PatClause (IAutoApp. (IApp. IVar <<Prelude.Types.Just>>
                                                             $ IBindVar ^cons_fuel^
                                                             $ IBindVar ty)
                                                      $ IBindVar <^poly^.ty>[])
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <^poly^.ty>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg x : Implicit False)
                                                                       => (IApp. (INamedApp. IVar Prelude.pure
                                                                                           $ IVar Test.DepTyCheck.Gen.Gen)
                                                                               $ (IApp. (INamedApp. IVar Prelude.Types.Just
                                                                                                  $ IVar ty)
                                                                                      $ IVar x))))
                                                         $ IVar Nil)) ] ]
         IDef <Builtin.Pair>[0, 1]
              [ PatClause (IAutoApp. (IApp. IVar <Builtin.Pair>[0, 1]
                                          $ IBindVar ^fuel_arg^
                                          $ IBindVar {arg:22}
                                          $ IBindVar {arg:26})
                                   $ IBindVar <^poly^.{arg:22}>[]
                                   $ IBindVar <^poly^.{arg:26}>[])
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IAutoApp. (IApp. IVar <<Builtin.MkPair>>
                                                                                   $ IVar Data.Fuel.Dry
                                                                                   $ IVar {arg:22}
                                                                                   $ IVar {arg:26})
                                                                            $ IVar <^poly^.{arg:22}>[]
                                                                            $ IVar <^poly^.{arg:26}>[])
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IAutoApp. (IApp. IVar <<Builtin.MkPair>>
                                                                                   $ IVar ^sub^fuel_arg^
                                                                                   $ IVar {arg:22}
                                                                                   $ IVar {arg:26})
                                                                            $ IVar <^poly^.{arg:22}>[]
                                                                            $ IVar <^poly^.{arg:26}>[])
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Builtin.MkPair>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:22} : IType)
                                             -> (MW ExplicitArg {arg:26} : IType)
                                             -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                                      -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                              $ IVar {arg:22}))
                                             -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                                      -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                              $ IVar {arg:26}))
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.Pair
                                                            $ IVar {arg:22}
                                                            $ IVar {arg:26}))))
                            IDef <<Builtin.MkPair>>
                                 [ PatClause (IAutoApp. (IApp. IVar <<Builtin.MkPair>>
                                                             $ IBindVar ^cons_fuel^
                                                             $ IBindVar a
                                                             $ IBindVar b)
                                                      $ IBindVar <^poly^.{arg:22}>[]
                                                      $ IBindVar <^poly^.{arg:26}>[])
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <^poly^.{arg:22}>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg x : Implicit False)
                                                                       => (IApp. IVar >>=
                                                                               $ (IApp. IVar <^poly^.{arg:26}>[]
                                                                                      $ IVar ^cons_fuel^)
                                                                               $ (ILam.  (MW ExplicitArg y : Implicit False)
                                                                                      => (IApp. (INamedApp. IVar Prelude.pure
                                                                                                          $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                              $ (IApp. (INamedApp. IVar Builtin.MkPair
                                                                                                                 $ IVar a
                                                                                                                 $ IVar b)
                                                                                                     $ IVar x
                                                                                                     $ IVar y))))))
                                                         $ IVar Nil)) ] ]
         IDef <DerivedGen.X>[0]
              [ PatClause (IAutoApp. (IApp. IVar <DerivedGen.X>[0]
                                          $ IBindVar ^fuel_arg^
                                          $ IBindVar {arg:830})
                                   $ IBindVar <^poly^.z>[])
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IAutoApp. (IApp. IVar <<DerivedGen.MkX>>
                                                                                   $ IVar Data.Fuel.Dry
                                                                                   $ IVar {arg:830})
                                                                            $ IVar <^poly^.z>[])
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                          $ (IApp. IVar ::
                                                                 $ (IAutoApp. (IApp. IVar <<DerivedGen.MkX>>
                                                                                   $ IVar ^sub^fuel_arg^
                                                                                   $ IVar {arg:830})
                                                                            $ IVar <^poly^.z>[])
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:830} : IType)
                                             -> (MW AutoImplicit : IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                                                      -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                              $ IVar z))
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:830}))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IAutoApp. (IApp. IVar <<DerivedGen.MkX>>
                                                             $ IBindVar ^cons_fuel^
                                                             $ IBindVar z)
                                                      $ IBindVar <^poly^.z>[])
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IAutoApp. (IApp. IVar <Prelude.Types.Maybe>[0]
                                                                                  $ IVar ^cons_fuel^
                                                                                  $ (IApp. IVar Builtin.Pair
                                                                                         $ IVar z
                                                                                         $ IVar z))
                                                                           $ (ILam.  (MW ExplicitArg add^fuel : Implicit False)
                                                                                  => (IAutoApp. (IApp. IVar <Builtin.Pair>[0, 1]
                                                                                                     $ IVar add^fuel
                                                                                                     $ IVar z
                                                                                                     $ IVar z)
                                                                                              $ (ILam.  (MW ExplicitArg add^fuel : Implicit False)
                                                                                                     => (IApp. IVar <^poly^.z>[]
                                                                                                             $ IVar add^fuel))
                                                                                              $ (ILam.  (MW ExplicitArg add^fuel : Implicit False)
                                                                                                     => (IApp. IVar <^poly^.z>[]
                                                                                                             $ IVar add^fuel)))))
                                                                $ (ILam.  (MW ExplicitArg ^bnd^{arg:837} : Implicit False)
                                                                       => (IApp. (INamedApp. IVar Prelude.pure
                                                                                           $ IVar Test.DepTyCheck.Gen.Gen)
                                                                               $ (IApp. (INamedApp. IVar DerivedGen.MkX
                                                                                                  $ IVar z)
                                                                                      $ IVar ^bnd^{arg:837}))))
                                                         $ IVar Nil)) ] ]
